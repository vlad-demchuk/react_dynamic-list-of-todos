{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelect","userId","useState","query","setQuery","visibleTodos","setVisibleTodos","resultGoods","allTodos","filter","todo","completed","filteredVisible","title","toLocaleLowerCase","includes","className","type","value","onChange","event","target","map","option","cn","readOnly","onClick","id","getTodos","a","fetch","response","json","getUser","CurrentUser","user","setUser","requestUser","userFromServer","console","log","useEffect","name","email","phone","App","setTodos","selectedUserId","setSelectedUserId","selectUser","requestTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb6f0fa1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  todos: Todo[],\n  onSelect: (userId: number) => void,\n  userId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onSelect, userId }) => {\n  const [query, setQuery] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState('all');\n  const options = ['all', 'active', 'completed'];\n\n  const handleTodo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const filteredQuery = todos\n    .filter((todo: Todo) => todo.title.toLocaleLowerCase()\n      .includes(query.toLocaleLowerCase()));\n\n  const filteredVisible = (allTodos: Todo[]) => {\n    switch (visibleTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  const resultGoods = filteredVisible(filteredQuery);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handleTodo}\n      />\n      <select onChange={(event) => {\n        setVisibleTodos(event.target.value);\n      }}\n      >\n        {options.map(option => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"TodoList__list-container\">\n\n        <ul className=\"TodoList__list\">\n          {resultGoods.map(todo => (\n            <li\n              className={cn('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={cn('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected': userId === todo.userId,\n                })}\n                type=\"button\"\n                onClick={() => {\n                  onSelect(todo.userId);\n                }}\n              >\n                {`User#${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/todos';\n\nexport const getTodos = async () => {\n  const response = await fetch(BASE_URL);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const response = await fetch(`https://mate.academy/students-api/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  userId: number,\n  onSelect: (userId: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onSelect }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const requestUser = async () => {\n    try {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } catch {\n      // eslint-disable-next-line no-console\n      console.log('User is not found');\n    }\n  };\n\n  useEffect(() => {\n    requestUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user?.id}`}</span>\n      </h2>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => {\n          onSelect(0);\n        }}\n      >\n        Clear\n      </button>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const selectUser = (userId: number): void => {\n    if (selectedUserId !== userId) {\n      setSelectedUserId(userId);\n    }\n  };\n\n  const requestTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n  };\n\n  useEffect(() => {\n    requestTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n\n        <TodoList\n          todos={todos}\n          onSelect={selectUser}\n          userId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSelect={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}